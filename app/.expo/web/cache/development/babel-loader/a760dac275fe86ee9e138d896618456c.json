{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useEffect, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar wrapper = function wrapper(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      position = _ref.position,\n      animOut = _ref.animOut,\n      _ref$keyFrame = _ref.keyFrame,\n      keyFrame = _ref$keyFrame === void 0 ? function () {\n    c;\n  } : _ref$keyFrame;\n\n  var _useState = useState(new Animated.Value(keyFrame)),\n      _useState2 = _slicedToArray(_useState, 2),\n      textAreaX = _useState2[0],\n      setTextAreaX = _useState2[1];\n\n  useEffect(function () {\n    Animated.timing(textAreaX, {\n      toValue: 0,\n      duration: 800,\n      useNativeDriver: false\n    }).start();\n  }, []);\n  return _jsx(Animated.View, {\n    style: {\n      width: width,\n      height: height,\n      position: position,\n      transform: [{\n        translateX: textAreaX\n      }]\n    },\n    children: _jsx(LinearGradient, {\n      colors: ['rgba(255,255,255,1)', 'transparent'],\n      style: {\n        width: '100%',\n        height: '100%',\n        borderRadius: 40,\n        backgroundColor: '#7D7D7D',\n        opacity: 0.4\n      },\n      blurRadius: 2\n    })\n  });\n};\n\nexport default wrapper;","map":{"version":3,"sources":["/Users/matteooriggi/SushiSystem/app/components/wrapperTutorial.js"],"names":["StatusBar","LinearGradient","useEffect","useState","wrapper","width","height","position","animOut","keyFrame","c","Animated","Value","textAreaX","setTextAreaX","timing","toValue","duration","useNativeDriver","start","transform","translateX","borderRadius","backgroundColor","opacity"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA+D;AAAA,MAA7DC,KAA6D,QAA7DA,KAA6D;AAAA,MAAtDC,MAAsD,QAAtDA,MAAsD;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AAAA,MAApCC,OAAoC,QAApCA,OAAoC;AAAA,2BAA3BC,QAA2B;AAAA,MAA3BA,QAA2B,8BAAd,YAAK;AAACC,IAAAA,CAAC;AAAC,GAAM;;AAE3E,kBAAkCP,QAAQ,CAAC,IAAIQ,QAAQ,CAACC,KAAb,CAAmBH,QAAnB,CAAD,CAA1C;AAAA;AAAA,MAAOI,SAAP;AAAA,MAAkBC,YAAlB;;AAGAZ,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,QAAQ,CAACI,MAAT,CAAgBF,SAAhB,EAA2B;AACvBG,MAAAA,OAAO,EAAE,CADc;AAEvBC,MAAAA,QAAQ,EAAE,GAFa;AAGvBC,MAAAA,eAAe,EAAC;AAHO,KAA3B,EAIGC,KAJH;AAKH,GANQ,EAMN,EANM,CAAT;AAQA,SACI,KAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE;AAACd,MAAAA,KAAK,EAACA,KAAP;AAAcC,MAAAA,MAAM,EAACA,MAArB;AAA6BC,MAAAA,QAAQ,EAACA,QAAtC;AAAgDa,MAAAA,SAAS,EAAC,CAAC;AAACC,QAAAA,UAAU,EAACR;AAAZ,OAAD;AAA1D,KAAtB;AAAA,cACI,KAAC,cAAD;AAAgB,MAAA,MAAM,EAAE,CAAC,qBAAD,EAAwB,aAAxB,CAAxB;AAAgE,MAAA,KAAK,EAAE;AAACR,QAAAA,KAAK,EAAC,MAAP;AAAeC,QAAAA,MAAM,EAAC,MAAtB;AAA8BgB,QAAAA,YAAY,EAAC,EAA3C;AAA+CC,QAAAA,eAAe,EAAC,SAA/D;AAA0EC,QAAAA,OAAO,EAAC;AAAlF,OAAvE;AAA+J,MAAA,UAAU,EAAE;AAA3K;AADJ,IADJ;AAKH,CAlBD;;AAoBA,eAAepB,OAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { ImageBackground, StyleSheet, Text, View , Image, TouchableWithoutFeedback, Animated} from 'react-native';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useEffect, useState } from 'react';\n\nconst wrapper = ({width, height, position, animOut, keyFrame = ( () =>{c})}) =>{\n\n    const [textAreaX, setTextAreaX] = useState(new Animated.Value(keyFrame));\n\n    //animazione in entrata\n    useEffect(() => {\n        Animated.timing(textAreaX, {\n            toValue: 0,\n            duration: 800,\n            useNativeDriver:false,\n        }).start();\n    }, []);\n    \n    return(\n        <Animated.View style={{width:width, height:height, position:position, transform:[{translateX:textAreaX}]}}>\n            <LinearGradient colors={['rgba(255,255,255,1)', 'transparent']} style={{width:'100%', height:'100%', borderRadius:40, backgroundColor:'#7D7D7D', opacity:0.4}} blurRadius={2} ></LinearGradient>\n        </Animated.View>\n    );\n}\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}